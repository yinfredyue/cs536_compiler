// Different aspects for testing:
// 1. Declarations
//      1.1 Variable declaration
//      1.2 Function declaration
//      1.3 Struct declaration
// 2. Statements
// 3. Expressions
// TODO: 

///////////////////////////////////
// 1.1 Test Variable declaration //
///////////////////////////////////
// Nonterminals: varDecl, varDeclList, type, id

// Test non-struct variable declaration
int x;
bool y;

// Test struct variable declaration
struct myStruct instance;

///////////////////////////////////
// 1.2 Test Function declaration //
///////////////////////////////////
// Nonterminals: fnDecl, formals, formalDecl, fnBody

// Test empty formal list, empty function body.
int  emptyParameterEmptyBody() {}

// Test single-element formal list, empty function body.
int  nonEmptyParameterEmptyBody(int x) {}

// Test multi-element formal list, empty function body.
int  nonEmptyParameterEmptyBody(int x, bool y) {}

// Test empty formal list, nonempty function body.
int  emptyParameterEmptyBody() { x = 1; }

// Test nonempty formal list, nonempty function body.
int  nonEmptyParameterEmptyBody(int x, bool y) {
    x= 1;
    y = 2;
}

/////////////////////////////////
// 1.3 Test Struct declaration //
/////////////////////////////////
// Nonterminals: structDecl, structBody 

struct myStruct {
    int x;
    bool y;
    struct anotherStruct nested;
};

////////////////////////
// 2. Test Statements //
////////////////////////
// Nonterminals: stmtList, stmt, fncall, actualList

// Test empty stmtList
int f() {}

// Test different stmts
void f () {
    // Test assignment
    x = y;

    // Test post increment
    x++;

    // Test post decrement
    x--;

    // Test read
    cin >> x;

    // Test write
    cout << x;

    // Test if
    if (true) { x = y; }

    // Test if-else
    if (true) {
        int y;
        x = y;
    } else {
        int z;
        x = z;
    }

    // Test while
    while(true) {
        struct S instance;
        int x;
        cin >> x;
        cout << x;
    }

    // Test repeat
    repeat (true) {
        int x;
    }

    // Test non-empty return
    return;

    // Test empty return
    return x;

    // Test function call with non argument
    f();

    // Test function call with arguments
    f(x, y, z);

    // More nested statements
    // if in while
    while(true) {
        if (true) { int x; x = y; }
    }

    // if in if
    if(true) {
        if (true) { int x; x = y; } else { x= z; }
    }

    // if in repeat
    repeat(true) {
        if (true) { int x; x = y; }
    }

    // while in if
    if (false) {
        while(true) {
            x = x + 1;
        }
    }

    // while in while
    while(true) {
        while(false) {
            x = false;
        }
    }

    // while in repeat
    repeat (false) {
        while (y) {
            y = x;
        }
    }

    // repeat in if
    if (true) {
        repeat (y) {
            x = y;
        }
    }

    // repeat in while
    while (y) {
        repeat (x) {
            x = z;
        }
    }

    // repeat in repeat
    repeat (r) {
        repeat (q) {
            x = q;
        }
    }
}

/////////////////////////
// 3. Test Expressions //
/////////////////////////
// Nonterminals: exp, assignExp, term, loc

void f() {
    c = a + b;
    c = a - b;
    c = a * b;
    c = a / b;
    c = !a;
    c = a && b;
    c = a || b;
    c = a == b;
    c = a != b;
    c = a <= b;
    c = a >= b;
    c = a > b;
    c = a < b;
    c = -a;
    if (x = y) { }
    cout << x = 2;
    c = f(x, y);
    c = f(x, y) + 1;

    /////////////////////
    // Test precedence //
    /////////////////////
    // precedence right        ASSIGN;
    // precedence left         OR;
    // precedence left         AND;
    // precedence nonassoc     LESS, GREATER, LESSEQ, GREATEREQ, EQUALS, NOTEQUALS;
    // precedence left         PLUS, MINUS;
    // precedence left         TIMES, DIVIDE;
    // precedence left         NOT;
    c = a || b && c;
    c = a && b || c;
    c = a && (b && c);
    c = (a && a) && b;
    c = (a && a) || b;
    c = a && b == b;
    c = a && b != b;
    c = a && b <= b;
    c = a && b >= b;
    c = a && b < b;
    c = a && b > b;
    c = a - b + c;
    c = a + b - c;
    c = a && b + c;
    c = a && b - c;
    c = a / b * c;
    c = a * b / c;
    c = a && b * c;
    c = a && b / c;
    c = !b;
    c = -b;
    c = a || a && a == a + a - a * -a / !a;
    c = 1 / !a / -a * a - a + a == a && a || a;

    ////////////////////////
    // Test associativity //
    ////////////////////////
    x = y = z = (a + 1);
    a = b = c = true;
    c = 1 + 2 + 3;
    c = 1 - 2 - 2;
    c = 1 * 2 * 3;
    c = 1 / 2 / 3;
    c = a && b && c;
    c = a || b || c;

    ///////////////
    // Test term //
    /////////////// 
    c = 28;
    c = "hello world";
    c = (42 + 42);
    c = foo(1);
    c = true;
    c = false;
    c = (true);

    /////////////////////////////
    // Test dot access opeator //
    /////////////////////////////
    // Nonterminals: loc

    c = a.b;
    c = a.b + c;
    c = a.b.c.d;
    c = a.b.c.d + c;
    a.b.c.d = "hi";
    x.x.x = 1;
}

