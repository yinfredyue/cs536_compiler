/**********************************************************************
 Java CUP specification for a parser for Wumbo programs.
 **********************************************************************/

import java_cup.runtime.*;
import java.util.*;

/*
 * The code below redefines method syntax_error to give better error messages
 * than just "Syntax error".
 */
parser code {:

public void syntax_error(Symbol currToken) {
    if (currToken.value == null) {
        ErrMsg.fatal(0,0, "Syntax error at end of file");
    }
    else {
        ErrMsg.fatal(((TokenVal)currToken.value).linenum,
                     ((TokenVal)currToken.value).charnum,
                     "Syntax error");
    }
    System.exit(-1);
}
:};


/* Terminals (tokens returned by the scanner). */
terminal                INT;
terminal                BOOL;
terminal                VOID;
terminal                TRUE;
terminal                FALSE;
terminal                STRUCT;
terminal                CIN;
terminal                COUT;
terminal                IF;
terminal                ELSE;
terminal                WHILE;
terminal		        REPEAT;
terminal                RETURN;
terminal IdTokenVal     ID;
terminal IntLitTokenVal INTLITERAL;
terminal StrLitTokenVal STRINGLITERAL;
terminal                LCURLY;
terminal                RCURLY;
terminal                LPAREN;
terminal                RPAREN;
terminal                SEMICOLON;
terminal                COMMA;
terminal                DOT;
terminal                WRITE;
terminal                READ;
terminal                PLUSPLUS;
terminal                MINUSMINUS;
terminal                PLUS;
terminal                MINUS;
terminal                TIMES;
terminal                DIVIDE;
terminal                NOT;
terminal                AND;
terminal                OR;
terminal                EQUALS;
terminal                NOTEQUALS;
terminal                LESS;
terminal                GREATER;
terminal                LESSEQ;
terminal                GREATEREQ;
terminal                ASSIGN;


/* Non-terminals
 *
 * NOTE: You will need to add more non-terminals to this list as you
 *       add productions to the grammar below.
 */
non terminal ProgramNode        program;
non terminal LinkedList         declList;
non terminal DeclNode           decl;
non terminal LinkedList         varDeclList;
non terminal VarDeclNode        varDecl;
non terminal FnDeclNode         fnDecl;
non terminal StructDeclNode     structDecl;
non terminal LinkedList         structBody;
non terminal FormalsListNode    formals;
non terminal LinkedList         formalsList;
non terminal FormalDeclNode     formalDecl;
non terminal FnBodyNode         fnBody;
non terminal LinkedList         stmtList;
non terminal StmtNode           stmt;
non terminal AssignNode         assignExp;
non terminal ExpNode            exp;
non terminal ExpNode            term;
non terminal CallExpNode        fncall;
non terminal LinkedList         actualList;
non terminal TypeNode           type;
non terminal ExpNode            loc;
non terminal IdNode             id;


/* Precedences
 *
 * NOTE: Add precedence and associativity declarations here.
 *
 */
precedence right        ASSIGN;
precedence left         OR;
precedence left         AND;
precedence nonassoc     LESS, GREATER, LESSEQ, GREATEREQ, EQUALS, NOTEQUALS;
precedence left         PLUS, MINUS;
precedence left         TIMES, DIVIDE;
precedence left         NOT;

/* Precedence does not matter for terminals below */
precedence left         DOT;

start with program;


/* The grammar with actions
 *
 * NOTE: add more grammar rules below.
 *
 */
program         ::= declList: d
                {: RESULT = new ProgramNode(new DeclListNode(d));
                :}
                ;

declList        ::= declList:dl decl:d
                {: dl.addLast(d);
                   RESULT = dl;
                :}
                | /* epsilon */
                {: RESULT = new LinkedList<DeclNode>();
                :}
                ;

decl            ::= varDecl:v
                {: RESULT = v;
                :}
                | fnDecl:f
                {: RESULT = f;
                :}
                | structDecl:s
                {: RESULT = s;
                :}
                ;

varDeclList     ::= varDeclList:vl varDecl:v
                {: // Similar to structBody
                   vl.addLast(v);
                   RESULT = vl;
                :}
                | /* epsilon */
                {: RESULT = new LinkedList<VarDeclNode>();
                :}
                ;

varDecl         ::= type:t id:i SEMICOLON
                {: RESULT = new VarDeclNode(t, i, VarDeclNode.NOT_STRUCT);
                :}
                | STRUCT id:i1 id:i2 SEMICOLON
                {: RESULT = new VarDeclNode(new StructNode(i1), i2, 0);
                :}
                ;

fnDecl          ::= type:t id:i formals:fmls fnBody:b
                {: RESULT = new FnDeclNode(t, i, fmls, b);
                :}
                ;

structDecl      ::= STRUCT id:i LCURLY structBody:b RCURLY SEMICOLON
                {: RESULT = new StructDeclNode(i, new DeclListNode(b));
                :}
                ;

structBody      ::= structBody:bl varDecl:v
                {: // We need to append to the result of structBody. However, 
                   // we cannot do this if structBody is of type DeclListNode.
                   // Thus, we make structBody type LinkedList. We transfer it
                   // to DeclListNode when structBody is used in structDecl.
                   bl.addLast(v);
                   RESULT = bl;
                :}
                | varDecl:v
                {: RESULT = new LinkedList<VarDeclNode>(Arrays.asList(v));
                :}
                ;

formals         ::= LPAREN RPAREN
                {: RESULT = new FormalsListNode(new LinkedList<FormalDeclNode>());
                :}
                | LPAREN formalsList:l RPAREN
                {: RESULT = new FormalsListNode(l);
                :}
                ;

formalsList     ::= formalDecl:f
                {: LinkedList<FormalDeclNode> l = new LinkedList<FormalDeclNode>();
                   l.addLast(f);
                   RESULT = l; 
                :}
                | formalDecl:f COMMA formalsList:l
                {: l.addFirst(f);
                   RESULT = l;
                :}
                ;

formalDecl      ::= type:t id:i
                {: RESULT = new FormalDeclNode(t, i);
                :}
                ;

fnBody          ::= LCURLY varDeclList:vl stmtList:sl RCURLY
                {: DeclListNode varDeclListNode = new DeclListNode(vl);
                   StmtListNode stmtListNode = new StmtListNode(sl);
                   RESULT = new FnBodyNode(varDeclListNode, stmtListNode);
                :}
                ;

stmtList        ::= stmtList:l stmt:s
                {: l.addLast(s);
                   RESULT = l; 
                :}
                | /* epsilon */
                {: // Similar to structBody
                   RESULT = new LinkedList<StmtNode>();
                :}
                ;

stmt            ::= assignExp:e SEMICOLON
                {: RESULT = new AssignStmtNode(e);
                :}
                | loc:l PLUSPLUS SEMICOLON
                {: RESULT = new PostIncStmtNode(l);
                :}
                | loc:l MINUSMINUS SEMICOLON
                {: RESULT = new PostDecStmtNode(l);
                :}
                | CIN READ loc:l SEMICOLON
                {: RESULT = new ReadStmtNode(l);
                :}
                | COUT WRITE exp:e SEMICOLON
                {: RESULT = new WriteStmtNode(e);
                :}
                | IF LPAREN exp:e RPAREN LCURLY varDeclList:vdl stmtList:sl RCURLY
                {: DeclListNode varDeclList = new DeclListNode(vdl); 
                   StmtListNode stmtList = new StmtListNode(sl);
                   RESULT = new IfStmtNode(e, varDeclList, stmtList);
                :}
                | IF LPAREN exp:e RPAREN LCURLY varDeclList:vdl1 stmtList:sl1 RCURLY ELSE LCURLY varDeclList:vdl2 stmtList:sl2 RCURLY
                {: DeclListNode varDeclList1 = new DeclListNode(vdl1); 
                   StmtListNode stmtList1 = new StmtListNode(sl1);
                   DeclListNode varDeclList2 = new DeclListNode(vdl2); 
                   StmtListNode stmtList2 = new StmtListNode(sl2);
                   RESULT = new IfElseStmtNode(e, varDeclList1, stmtList1, varDeclList2, stmtList2);
                :}
                | WHILE LPAREN exp:e RPAREN LCURLY varDeclList:vdl stmtList:sl RCURLY
                {: DeclListNode varDeclList = new DeclListNode(vdl); 
                   StmtListNode stmtList = new StmtListNode(sl);
                   RESULT = new WhileStmtNode(e, varDeclList, stmtList);
                :}
                | REPEAT LPAREN exp:e RPAREN LCURLY varDeclList:vdl stmtList:sl RCURLY
                {: DeclListNode varDeclList = new DeclListNode(vdl); 
                   StmtListNode stmtList = new StmtListNode(sl);
                   RESULT = new RepeatStmtNode(e, varDeclList, stmtList);
                :}
                | RETURN exp:e SEMICOLON
                {: RESULT = new ReturnStmtNode(e);
                :}
                | RETURN SEMICOLON
                {: RESULT = new ReturnStmtNode(null);
                :}
                | fncall:fc SEMICOLON
                {: RESULT = new CallStmtNode(fc);  
                :}
                ;

assignExp       ::= loc:l ASSIGN exp:e
                {: RESULT = new AssignNode(l, e);
                :}
                ;


exp             ::= assignExp:e
                {: RESULT = e;
                :}
                | exp:e1 PLUS exp:e2
                {: RESULT = new PlusNode(e1, e2);
                :}
                | exp:e1 MINUS exp:e2
                {: RESULT = new MinusNode(e1, e2);
                :}
                | exp:e1 TIMES exp:e2
                {: RESULT = new TimesNode(e1, e2);
                :}
                | exp:e1 DIVIDE exp:e2
                {: RESULT = new DivideNode(e1, e2);
                :}
                | NOT exp:e
                {: RESULT = new NotNode(e);
                :}
                | exp:e1 AND exp:e2
                {: RESULT = new AndNode(e1, e2);
                :}
                | exp:e1 OR exp:e2
                {: RESULT = new OrNode(e1, e2);
                :}
                | exp:e1 EQUALS exp:e2
                {: RESULT = new EqualsNode(e1, e2);
                :}
                | exp:e1 NOTEQUALS exp:e2
                {: RESULT = new NotEqualsNode(e1, e2);
                :}
                | exp:e1 LESS exp:e2
                {: RESULT = new LessNode(e1, e2);
                :}
                | exp:e1 GREATER exp:e2
                {: RESULT = new GreaterNode(e1, e2);
                :}
                | exp:e1 LESSEQ exp:e2
                {: RESULT = new LessEqNode(e1, e2);
                :}
                | exp:e1 GREATEREQ exp:e2
                {: RESULT = new GreaterEqNode(e1, e2);
                :}
                | MINUS term:t
                {: RESULT = new UnaryMinusNode(t);
                :}
                | term:t
                {: RESULT = t;
                :}
                ;

term            ::= loc:l
                {: RESULT = l;
                :}
                | INTLITERAL:l
                {: RESULT = new IntLitNode(l.linenum, l.charnum, l.intVal);
                :}
                | STRINGLITERAL:l
                {: RESULT = new StringLitNode(l.linenum, l.charnum, l.strVal);
                :}
                | TRUE:t
                {: RESULT = new TrueNode(((TokenVal)t).linenum, ((TokenVal)t).charnum);
                :}
                | FALSE:f
                {: RESULT = new FalseNode(((TokenVal)f).linenum, ((TokenVal)f).charnum);
                :}
                | LPAREN exp:e RPAREN
                {: RESULT = e;
                :}
                | fncall:fc
                {: RESULT = fc;  
                :}
                ;

fncall          ::= id:i LPAREN RPAREN
                {: RESULT = new CallExpNode(i, null);
                :}
                | id:i LPAREN actualList:al RPAREN
                {: RESULT = new CallExpNode(i, new ExpListNode(al));
                :}
                ;

actualList      ::= exp:e
                {: LinkedList<ExpNode> l = new LinkedList<ExpNode>();
                   l.addLast(e);
                   RESULT = l;
                :}
                | actualList:l COMMA exp:e
                {: l.addLast(e);
                   RESULT = l;
                :}
                ;

type            ::= INT
                {: RESULT = new IntNode();
                :}
                | BOOL
                {: RESULT = new BoolNode();
                :}
                | VOID
                {: RESULT = new VoidNode();
                :}
                ;

loc             ::= id:i
                {: RESULT = i;
                :}
                | loc:l DOT id:i
                {: RESULT = new DotAccessExpNode(l, i);
                :}
                ;

id              ::= ID:i
                {: RESULT = new IdNode(i.linenum, i.charnum, i.idVal);
                :}
                ;
