int aaa;
bool bbb;
struct S { int a; };
struct S s;
struct T { bool b; };
struct T t;

void f(int p1, bool p2) {}
void g() {}
void h() {}

void returnVoid() {}
int returnInt() { return 1; }
bool takeIntegerReturnBool(int a){ return true; }

// Test return statement in function declaration
void emptyReturnFromVoidFunc() {
    return; // ok
}

void nonemptyReturnFromVoidFunc() {
    return 1; // err
}

int emptyReturnFromNonvoidFunc() {
    return; // err
}

int wrongReturnTypeFunc() {
    return s; // err
}

void main() {
    // Test write
    cout << f; // err
    cout << f(1, true); // err
    cout << S;  // err
    cout << t; // err

    // Test read
    cin >> f; // err
    cin >> S; // err
    cin >> t; // err

    // Test function calling
    aaa(); // err
    S(); // err
    t(); // err
    f(); // err
    f(1); // err
    f(true); // err
    f(1, 1); // err
    f(true, true); // err
    f(1, t); // err
    f(true, 1); // err
    aaa(); // err
    f(); // err
    f(5); // err
    f(aaa, aaa); // err
    f(t, t.b); // err
    S(); // err

    // Test arithmetic operators
    aaa = 1 + 1; // ok
    aaa = 1 - 1; // ok
    aaa = 1 * 1; // ok
    aaa = 1 / 1; // ok
    aaa++;       // ok
    aaa--;       // ok
    aaa = bbb + 1; // err
    aaa = bbb - aaa; // err
    aaa = bbb / 2; // err
    aaa = bbb * 3; // err
    aaa = f + f; // 2 err

    // Test relational operator
    bbb = 1 < 2;   // ok
    bbb = 3 <= 4;  // ok
    bbb = aaa < 5; // ok
    bbb = f > 6; // err
    bbb = f > main; // 2 err

    // Test logical operator
    bbb = true && false && bbb; // ok
    bbb = 1 && false;     // err
    bbb = "string" || true; // err
    bbb = 1 && 2; // 2 err

    // Test if condition, while condition
    if (true) { bbb = true; } // ok
    if (1) { bbb = true; }     // err
    if (aaa) { aaa = 3; } else { bbb = false; } // err
    if ("String") { aaa = 1; } // err
    while (42) { aaa++; } // err

    // Test repeat condition
    repeat(5) { aaa++; } // ok
    repeat(bbb) { aaa--; } // err

    // Test equality operator type error and assignment type error 
    bbb = 1 == 2;       // ok
    bbb = 1 != 2;       // ok
    bbb = aaa == aaa;   // ok
    bbb = f == 3; // err
    bbb = "String" == 3; // err
    bbb = returnInt() == returnInt(); // ok
    bbb = returnVoid() == returnInt(); // err
    bbb = returnVoid() == returnVoid(); // err

    // Test assignment
    aaa = 1; // ok
    aaa = true; // err
    bbb = "string"; // err

    // Test equality operator on void
    bbb = returnInt() == returnInt(); // ok
    bbb = returnVoid() != returnInt(); // err
    bbb = returnVoid() == returnVoid(); // err

    // Test compare function
    bbb = f == g; // err
    bbb = returnVoid == returnInt; // err
    bbb = 1 == returnInt; // err

    // Test compare struct name
    bbb = T == S; // err
    bbb = T != S; // err

    // Test compare struct variable
    bbb = t == s; // err
    bbb = t != s; // err

    // Test function assignment
    f = g; // err

    // Test struct name assignment
    S = T; // err

    // Test struct variable assignment
    s = t; // err

    // some errors involving structs 
    t = 5; // err
    t = t; // err
    cin >> S; // err
    t = true || 3; // err
    bbb = S && s.a; // 2 err

    // other type errors 
    aaa = aaa + (!false); // err
    aaa = aaa + "foo"; // err
    bbb = aaa; // err

    // don't give too many or too few error messages here 
    bbb = (aaa + true) && (bbb < true); // 3 err

    // Test cases from spec
    cout << S + 1;               // err
    aaa = (true + 3) * 4;    // err
    bbb = true && (false || 3); // err
    f("a" * 4);         // 2 err
    aaa = 1 + s();        // err
    bbb = (true + 3) == aaa; // err

    aaa = true + "hello"; // 2 err
    aaa = 1 + takeIntegerReturnBool(true); // 2 err
    aaa = 1 + takeIntegerReturnBool(1, 2); // 2 err
    return 3+true; // 2 err

    // Test cases from piazza posts
    f = aaa; // Type mismatch, err
    s.a = true; // Type mismatch, err
    aaa = (bbb = 2);  // err
    bbb = "str" + 20; // err: apply arithmetic opearator to non-int
    aaa = bbb + bbb + bbb; // 3 err: 3 arith-operator

    while (42 && true) { aaa++; }  // err
    f = g = h;  // err
}
